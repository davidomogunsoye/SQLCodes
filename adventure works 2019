/* (13) write a query in SQL to find the sum of the quantity of all combination of group of distinct locationid and shelf column. 
Return locationid, shelf and sum of quantity as TotalQuantity. */

select LocationID, Shelf, sum(Quantity) TotalQuantity
from [AdventureWorks2019].[Production].[ProductInventory]
group by cube(LocationID, Shelf)

--Read up on cube fxn here: https://www.sqlservertutorial.net/sql-server-basics/sql-server-cube/

/* (12) write a query in SQL to find the sum of subtotal column. Group the sum on distinct salespersonid and customerid. 
Roll up the results into subtotal and running total. Return salespersonid, customerid and sum of subtotal column i.e. sum_subtotal. */

 select s.SalesPersonID, CustomerID, SUM(SubTotal) sum
 from [AdventureWorks2019].[Sales].[SalesOrderHeader] s
 group by rollup(s.SalesPersonID, CustomerID)

 --rollup creates a running total for each level of grouping.


/* (11) write a query in SQL to find the persons whose last name starts with letter 'L'. 
Return BusinessEntityID, FirstName, LastName, and PhoneNumber. Sort the result on lastname and firstname. */

select p.BusinessEntityID, PP.FirstName, PP.LastName, P.PhoneNumber
from [AdventureWorks2019].[Person].[PersonPhone] p
join [AdventureWorks2019].Person.Person pp
on pp.BusinessEntityID = P.BusinessEntityID
Where pp.LastName like 'L%'
Order by pp.LastName, pp.FirstName;

/* (10) find the total quantity for a group of locationid multiplied by 10. */

select Sum(p.Quantity) sum
from [AdventureWorks2019].[Production].[ProductInventory] p
Group by (p.LocationID*10)

/*(9) retrieve total quantity of each productid which are in shelf of 'A' or 'C' or 'H'. 
Filter the results for sum quantity is more than 500. Return productid and sum of the quantity. 
Sort the results according to the productid in ascending order. */

With Sum_Qty as (
	select p.ProductID ID, p.Shelf, sum(p.quantity) sum
	from [AdventureWorks2019].[Production].[ProductInventory] p
	where p.Shelf in ('A','C','H')
	group by p.ProductID, p.Shelf
	)

select ID, Sum
from Sum_Qty
where sum > 500
order by ID

-- or 

select p.ProductID ID, sum(p.quantity) sum
from [AdventureWorks2019].[Production].[ProductInventory] p
where p.Shelf in ('A','C','H')
group by p.ProductID, p.Shelf
Having sum(p.quantity)>500
order by p.ProductID


/* (8) find the average and the sum of the subtotal for every customer. 
Return customerid, average and sum of the subtotal. 
Grouped the result on customerid and salespersonid. 
Sort the result on customerid column in descending order. */

select s.CustomerID, s.SalesPersonID, avg(s.SubTotal) avg, sum(s.subTotal) sum
from [AdventureWorks2019].Sales.SalesOrderHeader s
group by s.CustomerID, S.SalesPersonID
order by s.CustomerID desc;

/* (7) calculate the total freight paid by each customer. 
Return customerid and total freight. Sort the output in ascending order on customerid. */

select s.CustomerID, SUM(s.Freight) total_freight
from [AdventureWorks2019].Sales.SalesOrderHeader s
group by s.CustomerID
order by s.CustomerID;

/* (6) create a list of unique jobtitles in the employee table in Adventureworks database. 
Return jobtitle column and arranged the resultset in ascending order. */

select distinct e.JobTitle
from [AdventureWorks2019].HumanResources.Employee e
order by e.JobTitle; 

  /* (5) return all rows from the salesorderheader table in Adventureworks database 
and calculate the percentage of tax on the subtotal have decided. 
Return salesorderid, customerid, orderdate, subtotal, percentage of tax column. 
Arranged the result set in descending order on subtotal. */

select s.SalesOrderID, s.CustomerID, s.OrderDate, s.SubTotal, ((s.TaxAmt / s.SubTotal) * 100) percent_tax
from [AdventureWorks2019].Sales.SalesOrderHeader s
order by s.SubTotal desc;

-- (1) Retrieve all rows and columns from the employee table in the Adventureworks database. Sort the result set in ascending order on jobtitle.

SELECT *
  FROM [AdventureWorks2019].[HumanResources].[Employee] a
  order by a.[JobTitle] desc;

/* return all rows and a subset of the columns (FirstName, LastName, businessentityid) 
from the person table in the AdventureWorks database. rename the third column to Employee_id. 
Arranged the output in ascending order by lastname. */

select p.[FirstName], p.[LastName], p.[BusinessEntityID] employee_id
from [AdventureWorks2019].[person].[person] p
order by p.LastName asc;

/* return only the rows for product that have a sellstartdate that is not NULL and a productline of 'T'. 
Return productid, productnumber, and name. Arranged the output in ascending order on name */

SELECT a.ProductID, a.ProductNumber, a.Name
  FROM [AdventureWorks2019].[Production].[Product] a
  where a.SellStartDate is not null 
  and 
  a.ProductLine = 'T'
  order by name;


/* return the total ListPrice and StandardCost of products for each color. 
Products that name starts with 'Mountain' and ListPrice is more than zero. Return Color, total list price, total standardcode. 
Sort the result set on color in ascending order. */

SELECT distinct a.Color, sum(a.ListPrice) total_list_price, sum(a.standardCost) total_standard_cost
  FROM [AdventureWorks2019].[Production].[Product] a
  where a.name like 'Mountain%' 
  and 
  a.ListPrice > 0
  Group by a.color
  order by a.Color;
  
  

